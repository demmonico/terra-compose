#!/usr/bin/env bash
#-----------------------------------------------------------#
# @author: demmonico, @email demmonico@gmail.com, @repo https://github.com/demmonico/terra-compose, Â©2021-2024
#-----------------------------------------------------------#

read -r -d '' HELP_STRING <<'EOF'
-----------------------------------------------------------
Help information
-----------------------------------------------------------
TerraCompose is a tool aimed to help to run Terraform commands in Docker and protect you against changes wrongly.

FORMAT: <SCRIPT_NAME> <ACTION> <ALIAS>

<ACTION> - TF action you want to run:
    - plan          - build TF plan, also available with `-debug` suffix
                      (debug mode will skip init, format check and validation steps)
    - apply         - apply TF plan, also available with `-debug` suffix
                      (debug mode will skip init, format check and validation steps)
    - workspaces    - equal to `workspace list`
    - run           - proxy all arguments directly to `terraform`. 
                      Allows running any custom command
    - shell         - run a shell inside the terraform docker container.
                      Allows running any custom commands inside
    - help          - this help information
<ALIAS>  - a unique shortcut to project/environment pair, like `runner_prod`.

EOF

set -e

RC='\033[0;31m'
YC='\033[0;33m'
NC='\033[0m' # No Color

VERBOSE_DEBUG_MODE=0
VERBOSE_INFO_MODE=1
VERBOSE_ERROR_MODE=5
VERBOSE_MODE="${VERBOSE_INFO_MODE}" # default

_DIR="$(pwd)"
BASE_DIR="${_DIR}"
CONFIG_YAML_FILE="${_DIR}/aliases.yaml"
TF_PLAN_FILENAME='plan.tfplan'

HELP_STRING="${HELP_STRING}$( echo -e "\n\nList of available aliases from ${YC}${CONFIG_YAML_FILE}${NC}:\n>>>>>"; cat ${CONFIG_YAML_FILE} | grep -v -E "^$|^\s*\#"; echo "<<<<<" )"

is_debug_verbose_mode() {
    [[ "${VERBOSE_MODE}" -le "${VERBOSE_DEBUG_MODE}" ]]
}

init() {
    local proj_subpath="$( get_yaml_value ${CONFIG_YAML_FILE} 'aliases' "${ALIAS}" 'path' )"
    if [ -z "${proj_subpath}" ]; then
        echo -e "${RC}Error${NC}: no path was found for alias ${YC}${ALIAS}${NC}"
        exit 2
    fi
    PROJ_DIR="${BASE_DIR}/${proj_subpath}"
    if [ -z "${PROJ_DIR}" ] || [ ! -d "${PROJ_DIR}" ]; then
        echo -e "${RC}Error${NC}: empty project DIR or was found for alias ${YC}${ALIAS}${NC}"
        exit 2
    fi

    # check AWS access
    AWS_PROFILE="${AWS_PROFILE:-"${AWS_DEFAULT_PROFILE}"}"
    if [ -z "${AWS_PROFILE}" ]; then
        echo -e "${RC}Error${NC}: env var AWS_PROFILE/AWS_DEFAULT_PROFILE is empty. It's required to have one of them, pointing to the actual AWS profile (`~/.aws/credentials`)"
        exit 5
    fi

    PROJ_WORKSPACE="$( get_yaml_value ${CONFIG_YAML_FILE} 'aliases' "${ALIAS}" 'workspace' )"
    PROJ_TFVAR="$( get_yaml_value ${CONFIG_YAML_FILE} 'aliases' "${ALIAS}" 'tfvars' )"

    TF_PLAN_FILE="${PROJ_DIR}/${TF_PLAN_FILENAME}"

    local tf_default_version="$( get_yaml_value ${CONFIG_YAML_FILE} 'default' 'tfversion' )"
    local tf_proj_version="$( get_yaml_value ${CONFIG_YAML_FILE} 'aliases' "${ALIAS}" 'tfversion' )"
    TF_VERSION="${tf_proj_version:-${tf_default_version}}"

    PROJ_BACKEND_CONFIG="$( get_yaml_value ${CONFIG_YAML_FILE} 'aliases' "${ALIAS}" 'backend_config' )"

    # env vars file
    ENV_VARS_FILE_DOCKER_PARAM=''
    if [ -f .env ]; then
      ENV_VARS_FILE_DOCKER_PARAM="--env-file ${BASE_DIR}/.env"
    fi
}

run_host_hook() {
    local hook_name=$1
    local hook_cmd="$( get_yaml_value ${CONFIG_YAML_FILE} 'aliases' "${ALIAS}" 'hooks' "${hook_name}" )"
    if [ -n "${hook_cmd}" ]; then
        echo -e "${YC} >>> Running host hook ${RC}${hook_name}${YC} ... ${NC}"
        bash -c "${hook_cmd}"
        echo -e "${YC} >>> Done ${NC}"
    fi
}

prepare_container_hook() {
    local hook_name=$1
    local hook_cmd="$( get_yaml_value ${CONFIG_YAML_FILE} 'aliases' "${ALIAS}" 'hooks' "${hook_name}" )"
    if [ -n "${hook_cmd}" ]; then
        echo "${hook_cmd} && "
    fi
}

run_docker() {
    local cmd=$@

    if is_debug_verbose_mode; then
        echo -e "${YC} >>> Command: ${RC}"
        # prevent to expand the color on the subshell when spinning up the interactive shell
        if [ -z "${cmd}" ]; then
            echo -n -e "${NC}"
        fi
        set -x
    fi

    docker run --rm -ti \
        -v "${BASE_DIR}":"${BASE_DIR}" \
        -v ~/.aws:/root/.aws \
        -v ~/.ssh:/root/.ssh \
        -e AWS_PROFILE=${AWS_PROFILE} \
        ${ENV_VARS_FILE_DOCKER_PARAM} \
        -w=${PROJ_DIR} \
        --entrypoint /bin/sh \
        hashicorp/terraform:${TF_VERSION} \
        ${cmd:+-c} ${cmd:+"$( prepare_container_hook 'before_container_run' )${cmd}"}

    { if is_debug_verbose_mode; then
        set +x;
        echo -e "${NC}"
    fi } 2>/dev/null

}

run_tf_init() {
    run_host_hook 'before_tf_init'

    local backend_config="${PROJ_BACKEND_CONFIG:+"-backend-config=\"${PROJ_BACKEND_CONFIG}\""}"
    cd "${PROJ_DIR}" && \
        echo -e "Project dir is ${YC}${PROJ_DIR}${NC} and we are currently right here!" && echo "" && \
        echo -e "${YC} >>> Running TF init${PROJ_BACKEND_CONFIG:+" using '${backend_config}'"} ...${NC}" && \
        run_docker terraform init ${backend_config}

    run_host_hook 'after_tf_init'
}

ask_input_workspace() {
    read -p "Please input workspace name: " CURRENT_WORKSPACE
    if [ -z "$( run_tf_workspace_list | grep -E "${CURRENT_WORKSPACE}" )" ]; then
        echo -e "${RC}Error${NC}: Ooops, wrong workspace name ${YC}${CURRENT_WORKSPACE}${NC}. Please try again!" >&2
        ask_input_workspace
    fi
}

run_tf_workspace_list() {
    run_docker terraform workspace list
}

print_workspaces() {
    echo -e "\nTF workspaces:"
    run_tf_workspace_list
}

select_workspace() {
    if [ -n "${PROJ_WORKSPACE}" ]; then
        echo -e "${YC} >>> Workspace '${RC}${PROJ_WORKSPACE}${YC}' was found in config${NC}"
        CURRENT_WORKSPACE="${PROJ_WORKSPACE}"
    else
        echo -e -n "${YC} >>> Detecting TF workspaces ... ${NC}"
        local workspaces_count="$( run_tf_workspace_list | grep -v -e '^\s*$' | wc -l )"
        echo "${workspaces_count} was detected"
        CURRENT_WORKSPACE="$( run_tf_workspace_list | grep '*' | tr -dc '[:alnum:]' | cut -d " " -f2 )"

        if [ ${workspaces_count} -gt 1 ] || [ ! "${CURRENT_WORKSPACE}" = "default" ]; then
            print_workspaces
            ask_input_workspace
        fi
    fi

    echo -e "${YC} >>> Selecting TF workspace ${RC}${CURRENT_WORKSPACE}${YC} ... ${NC}"
    run_docker terraform workspace select ${CURRENT_WORKSPACE}
}

ask_when_no_tfvars_file() {
    function normalize_filename() {
        local filename=$1
        if [[ "${filename}" = *.tfvars ]] || [[ "${filename}" = *.tfvars.json ]] || [[ "${filename}" = *.tfvars.hcl ]]; then
            echo "${filename}"
        else
            echo "${filename}.tfvars"
        fi
    }

    local filename="$( normalize_filename "$1" )"
    local file="${PROJ_DIR}/${filename}"

    if [ -f "${file}" ]; then
        echo "${filename}"
    else
        echo -e "Oops, file ${RC}${filename}${NC} was not found at ${YC}${PROJ_DIR}${NC} folder!" >&2
        echo -e "There are ${YC}*.tfvars${NC} files:" >&2
        eval "ls ${PROJ_DIR} | grep --color '.tfvars'" >&2

        read -p "Please input filename (with or without .tfvars extension) which one you want to work with: " filename
        echo "$( ask_when_no_tfvars_file "${filename}" )"
    fi
}

get_human_time_since_file_modified() {
    local file=$1
    local time=$(( $(date +%s) - $(stat -f%c "${file}") ))
    local sec=$((time%60))
    local min=$((time/60%60))
    local h=$((time/60/60%24))
    local d=$((time/60/60/24))
    (( ${d} > 0 )) && printf '%d days ' ${d}
    (( ${h} > 0 )) && printf '%d hours ' ${h}
    (( ${min} > 0 )) && printf '%d minutes ' ${min}
    (( ${d} > 0 || ${h} > 0 || ${min} > 0 )) && printf 'and '
    printf '%d seconds\n' ${sec}
}

# See @package: https://github.com/demmonico/bash-parse-yaml
# get config value from yaml config
# format: get_yaml_value YAML_FILE_NAME parent1 patent2 ... config_key_name
function get_yaml_value {
  if [ "$#" -lt 2 ]; then
    echo -e "${RC}Error:${NC} too few arguments at '${YC}get_yaml_value${NC}'"
    exit 1
  fi

  local prefix='' CONFIG_YAML_FILE=$1

  local config_path="${prefix}"
  for i in "${@:2}"; do
    [ -z "${config_path}" ] && config_path="${i}" || config_path="${config_path}_${i}"
  done

  local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
  # shorter version from https://stackoverflow.com/a/21189044
  sed -ne "s|^\($s\):|\1|" \
      -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
      -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
  # compose list of variables like parent1_parent2_target="target value"
  awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) { if (i > indent) { delete vname[i]; idx[i]=0 } };
      if (length($2) == 0) { vname[indent]= ++idx[indent] };
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) { vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'${prefix:+${prefix}_}'", vn, vname[indent], $3);
      }
   }' |\
  # filter using pattern
  grep ${config_path} | \
  # fetch string value or list values
  {
    local result
    declare -a config_results=()
    while read line; do config_results+=("${line}"); done

    # list value
    if [[ "${#config_results[*]}" -gt 1 ]]; then
      local config_values=''
      for i in "${config_results[@]}"; do
        CONFIG_KEY="$( echo "${i}" | sed -E 's/^'"${config_path}_"'(.*)=.*$/\1/g' )"
        # validate key should be like ${config_path}_<number>
        if ! [[ ${CONFIG_KEY} =~ ^[0-9]+$ ]]; then
          echo -e "${RC}Error:${NC} config path '${YC}${config_path}${NC}' contains non-supported value (string or list)"
          exit 1
        fi
        # collect value
        if [ -z "${config_values}" ]; then
          config_values="$( echo "${i}" | sed -E 's/^.*"(.*)".*$/\1/g' )"
        else
          config_values="${config_values}"$'\n'"$( echo "${i}" | sed -E 's/^.*"(.*)".*$/\1/g' )"
        fi
      done
      result="${config_values}"

    # single value
    else
      result=$( echo "${config_results[@]}" | sed -E 's/^.*"(.*)".*$/\1/g' )
    fi

    echo "${result}"
  }
}

#-----------------------------------------------------------#

ACTION=$1
case "${ACTION}" in
    'plan' | 'plan-debug' | 'apply' | 'apply-debug' | 'workspaces' | 'run' | 'shell' )
        ;;
    'help')
        echo "${HELP_STRING}"
        exit;;
    '')
        echo -e "${RC}Error${NC}: ACTION param is required"
        echo "${HELP_STRING}"
        exit 1;;
    *)
        echo -e "${RC}Error:${NC} invalid action ${ACTION}"
        echo "${HELP_STRING}"
        exit 1;;
esac

ALIAS=$2
if [ -z "${ALIAS}" ]; then
    echo -e "${RC}Error${NC}: ALIAS param is required"
    echo -e "${HELP_STRING}"
    exit 1
fi

init

#-----------------------------------------------------------#
##### Main
#-----------------------------------------------------------#

run_host_hook 'before_all'

# TF action
case "${ACTION}" in
    # use the latest workspace
    'run')
        echo -e "${YC} >>> Running custom command ${RC}${@:3}${NC} at the alias ${YC}${ALIAS} (${PROJ_DIR})${NC}."
        echo -e "${YC} >>> ${RC}Please, be carefull!!!${NC}"
        read -p "Are you sure to proceed? To approve print 'yes': " APPLY_APPROVE
        if [ ! "${APPLY_APPROVE}" = 'yes' ]; then
            echo -e "${YC} >>> Exiting ... ${NC}\n"
            exit 0
        fi

        run_docker ${@:3}
        exit;;

    # use the latest workspace
    'shell')
        echo -e "${YC} >>> Shelling into the ${RC}${@:3}${NC} at the alias ${YC}${ALIAS} (${PROJ_DIR})${NC}."
        echo -e "${YC} >>> ${RC}Please, be carefull!!!${NC}"
        read -p "Are you sure to proceed? To approve print 'yes': " APPLY_APPROVE
        if [ ! "${APPLY_APPROVE}" = 'yes' ]; then
            echo -e "${YC} >>> Exiting ... ${NC}\n"
            exit 0
        fi

        run_docker
        exit;;

    'workspaces')
        echo -e "${YC} >>> Workspace '${RC}${PROJ_WORKSPACE}${YC}' was found in alias config${NC}"
        echo -e "${YC} >>> Detecting TF workspaces ... ${NC}"
        print_workspaces
        exit;;
    
    'plan')
        run_tf_init
        select_workspace

        # TF validation
        echo -e "${YC} >>> Checking format and validating TF templates ... ${NC}"
        run_docker terraform fmt --check=true -recursive -diff
        run_docker terraform validate

        # TF tfvars
        echo -e "${YC} >>> Searching for ${RC}tfvars${YC} file ... ${NC}"
        if [ -z "${PROJ_TFVAR}" ]; then
            # no pre-configured tfvars
            echo -e "${YC} >>> No TFVARS filename was found at the config, so will try current workspace '${RC}${CURRENT_WORKSPACE}${YC}' as a TFVARS name${NC}"
            TFVARS_FILENAME="$( ask_when_no_tfvars_file "${CURRENT_WORKSPACE}" )"
            TFVARS_COMMAND_PARAM="-var-file=${TFVARS_FILENAME}"
        elif [ "${PROJ_TFVAR}" = '-' ]; then
            # pre-configured to skip tfvars
            echo -e "${YC} >>> Skipping TFVARS because '${RC}${PROJ_TFVAR}${YC}' was found in alias config${NC}"
            TFVARS_FILENAME="-"
            TFVARS_COMMAND_PARAM=""
        else
            # pre-configured tfvars
            echo -e "${YC} >>> TFVARS filename '${RC}${PROJ_TFVAR}${YC}' was found in alias config${NC}"
            TFVARS_FILENAME="$( ask_when_no_tfvars_file "${PROJ_TFVAR}" )"
            TFVARS_COMMAND_PARAM="-var-file=${TFVARS_FILENAME}"
        fi

        # TF plan
        echo -e "\n------------------------------------------------------------------------\n"
        echo -e "${YC} >>> Building TF plan:${NC} alias ${YC}${ALIAS}${NC} / workspace ${RC}${CURRENT_WORKSPACE}${NC} / tfvars ${RC}${TFVARS_FILENAME}${NC}"
        echo -e "\n------------------------------------------------------------------------\n"
        run_docker terraform plan ${TFVARS_COMMAND_PARAM} -out=${TF_PLAN_FILENAME}
        echo -e "\n${YC} >>> TF plan:${NC} alias ${YC}${ALIAS}${NC} / workspace ${RC}${CURRENT_WORKSPACE}${NC} / tfvars ${RC}${TFVARS_FILENAME}${NC}: was generated plan ${RC}${TF_PLAN_FILENAME}${NC}\n${YC} >>> ${NC}(${TF_PLAN_FILE})\n"
        exit;;

    # TODO re-use plan action
    'plan-debug')
        echo -e "${YC} >>> Running in ${RC}DEBUG${YC} mode (without init backend, format check and validation)!${NC}"
        echo -e "\n------------------------------------------------------------------------\n"

        select_workspace

        # TF tfvars
        echo -e "${YC} >>> Searching for ${RC}tfvars${YC} file ... ${NC}"
        if [ -z "${PROJ_TFVAR}" ]; then
            # no pre-configured tfvars
            echo -e "${YC} >>> No TFVARS filename was found at the config, so will try current workspace '${RC}${CURRENT_WORKSPACE}${YC}' as a TFVARS name${NC}"
            TFVARS_FILENAME="$( ask_when_no_tfvars_file "${CURRENT_WORKSPACE}" )"
            TFVARS_COMMAND_PARAM="-var-file=${TFVARS_FILENAME}"
        elif [ "${PROJ_TFVAR}" = '-' ]; then
            # pre-configured to skip tfvars
            echo -e "${YC} >>> Skipping TFVARS because '${RC}${PROJ_TFVAR}${YC}' was found in alias config${NC}"
            TFVARS_FILENAME="-"
            TFVARS_COMMAND_PARAM=""
        else
            # pre-configured tfvars
            echo -e "${YC} >>> TFVARS filename '${RC}${PROJ_TFVAR}${YC}' was found in alias config${NC}"
            TFVARS_FILENAME="$( ask_when_no_tfvars_file "${PROJ_TFVAR}" )"
            TFVARS_COMMAND_PARAM="-var-file=${TFVARS_FILENAME}"
        fi

        # TF plan
        echo -e "\n------------------------------------------------------------------------\n"
        echo -e "${YC} >>> Building TF plan:${NC} alias ${YC}${ALIAS}${NC} / workspace ${RC}${CURRENT_WORKSPACE}${NC} / tfvars ${RC}${TFVARS_FILENAME}${NC}"
        echo -e "\n------------------------------------------------------------------------\n"
        run_docker terraform plan ${TFVARS_COMMAND_PARAM} -out=${TF_PLAN_FILENAME}
        echo -e "\n${YC} >>> TF plan:${NC} alias ${YC}${ALIAS}${NC} / workspace ${RC}${CURRENT_WORKSPACE}${NC} / tfvars ${RC}${TFVARS_FILENAME}${NC}: was generated plan ${RC}${TF_PLAN_FILENAME}${NC}\n${YC} >>> ${NC}(${TF_PLAN_FILE})\n"
        exit;;

    'apply')
        run_tf_init
        select_workspace

        # check TF plan
        if [ ! -f "${TF_PLAN_FILE}" ]; then
            echo -e "${RC}Error${NC}: TF plan file ${YC}${TF_PLAN_FILE}${NC} does not exists. \nPlease build TF plan first"
            exit 10
        fi

        # TF apply
        echo -e "\n------------------------------------------------------------------------\n"
        echo -e "${YC} >>> Applying TF plan:${NC} ${RC}${TF_PLAN_FILENAME}${NC} / alias ${YC}${ALIAS}${NC} / workspace ${RC}${CURRENT_WORKSPACE}${NC}"
        echo -e "${YC} >>> ${NC}File ${YC}${TF_PLAN_FILE}${NC} was modified ${YC}$( get_human_time_since_file_modified "${TF_PLAN_FILE}" ) ago${NC}"
        echo -e "\n------------------------------------------------------------------------\n"
        
        read -p "Are you sure that you want to apply ${CURRENT_WORKSPACE}? To approve print 'yes': " APPLY_APPROVE
        if [ ! "${APPLY_APPROVE}" = 'yes' ]; then
            echo -e "${YC} >>> Exiting ... ${NC}\n"
            exit 0
        fi

        run_docker terraform apply ${TF_PLAN_FILENAME}
        rm ${TF_PLAN_FILE}

        echo -e "\n${YC} >>> TF apply:${NC} alias ${YC}${ALIAS}${NC} / workspace ${RC}${CURRENT_WORKSPACE}${NC}: applied plan ${RC}${TF_PLAN_FILENAME}${NC}"
        echo -e "${YC} >>> ${NC}Plan ${YC}${TF_PLAN_FILE}${NC} has been ${RC}removed${NC}\n"
        exit;;

    # TODO re-use apply action
    'apply-debug')
        echo -e "${YC} >>> Running in ${RC}DEBUG${YC} mode (without init backend, format check and validation)!${NC}"
        echo -e "\n------------------------------------------------------------------------\n"

        select_workspace

        # check TF plan
        if [ ! -f "${TF_PLAN_FILE}" ]; then
            echo -e "${RC}Error${NC}: TF plan file ${YC}${TF_PLAN_FILE}${NC} does not exists. \nPlease build TF plan first"
            exit 10
        fi

        # TF apply
        echo -e "\n------------------------------------------------------------------------\n"
        echo -e "${YC} >>> Applying TF plan:${NC} ${RC}${TF_PLAN_FILENAME}${NC} / alias ${YC}${ALIAS}${NC} / workspace ${RC}${CURRENT_WORKSPACE}${NC}"
        echo -e "${YC} >>> ${NC}File ${YC}${TF_PLAN_FILE}${NC} was modified ${YC}$( get_human_time_since_file_modified "${TF_PLAN_FILE}" ) ago${NC}"
        echo -e "\n------------------------------------------------------------------------\n"

        read -p "Are you sure that you want to apply ${CURRENT_WORKSPACE}? To approve print 'yes': " APPLY_APPROVE
        if [ ! "${APPLY_APPROVE}" = 'yes' ]; then
            echo -e "${YC} >>> Exiting ... ${NC}\n"
            exit 0
        fi

        run_docker terraform apply ${TF_PLAN_FILENAME}
        rm ${TF_PLAN_FILE}

        echo -e "\n${YC} >>> TF apply:${NC} alias ${YC}${ALIAS}${NC} / workspace ${RC}${CURRENT_WORKSPACE}${NC}: applied plan ${RC}${TF_PLAN_FILENAME}${NC}"
        echo -e "${YC} >>> ${NC}Plan ${YC}${TF_PLAN_FILE}${NC} has been ${RC}removed${NC}\n"
        exit;;

    *)
        echo -e "${RC}Error:${NC} ooops, catch all for invalid action ${ACTION}"
        exit 1;;
esac

run_host_hook 'after_all'
